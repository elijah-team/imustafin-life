class Application < EV_APPLICATION
		//redefine
		//	create_interface_objects
{	

access {Any}

	make_and_launch() {
		construct cell_grid.make (Dims)
		default_create()
		prepare()
		launch()
	}

access "Window and application initialization" {Any}

	create_interface_objects() {
		// <Precursor>
		
		construct box
		construct pixmap.make_with_size (400, 400)
		construct first_window.make_with_title ("Eiffel of Life")
		first_window.set_minimum_size (400, 400)
		construct next_generation_button.make_with_text ("Next Generation")

		box.extend (pixmap)
		box.extend (next_generation_button)
		first_window.extend (box)
	}

	prepare() {
		set_first_generation()

		next_generation_button.select_actions.extend (next_generation_button_clicked)

		set_first_generation()
		draw_to_pixmap()

		first_window.close_request_actions.extend (destroy) 
		first_window.show()
	}

	next_generation_button_clicked() {
		next_generation()
		draw_to_pixmap()
	}

	var box: EV_VERTICAL_BOX
	var pixmap: EV_PIXMAP
	var next_generation_button: EV_BUTTON
	var first_window: EV_TITLED_WINDOW

	val Pixmap_dims: INTEGER = 400

access "Game of Life generations" {Any} // was NONE

	val Dims: INTEGER = 40

	var cell_grid: CELL_GRID

	draw_to_pixmap() {
		var square_size: INTEGER
		var i, j: INTEGER
		var status: BOOLEAN
		var color: EV_COLOR

		square_size := Pixmap_dims // Dims

		iterate from 1 to Dims+1 with i {
			iterate from 1 to Dims+1 with j {
				status := cell_grid.cell_at (i, j)
				if status {
					construct color.make_with_rgb (0, 0, 0)
					pixmap.set_foreground_color (color)
				else
					construct color.make_with_rgb (1, 1, 1)
					pixmap.set_foreground_color (color)
				}
				pixmap.fill_rectangle (square_size * (i - 1), square_size * (j - 1), square_size, square_size)
				//j = j + 1
			}
			//i = i + 1
		}
	}


	set_first_generation() {
		var random: RANDOM
		var i, j: INTEGER
		var status: BOOLEAN
	
		construct random.set_seed (123)
		iterate from 1 to Dims+1 with i {
			iterate from 1 to Dims+1 with j {
				random.forth()
				status = ((random.item() \\ 2) == 0) // TODO \\
				cell_grid.set_cell_status (status, i, j)
				//j = j + 1
			}
			//i = i + 1
		}

	}

	next_generation() {
		cell_grid.compute_next_generation
	}

}
